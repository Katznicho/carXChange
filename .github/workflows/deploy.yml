name: carXChange Development to Production 

on: 
  push: 
    branches: [ "main" ] 

jobs: 
  deploy: 
    runs-on: ubuntu-latest 
    services: 
      mysql: 
        image: mysql:8.0
        env: 
          MYSQL_ROOT_PASSWORD: u227994091_carxchange
          MYSQL_DATABASE: u227994091_carxchange
          MYSQL_USER: u227994091_carxchange
          MYSQL_PASSWORD: Log10tan10
        ports: 
          - 3306:3306 
        options: --health-cmd="mysqladmin ping --silent" --health-interval=10s --health-timeout=5s --health-retries=3 

    steps: 
      - name: Checkout Repository 
        uses: actions/checkout@v4 

      - name: Set up PHP 
        uses: shivammathur/setup-php@v2 
        with: 
          php-version: '8.2' 
          extensions: mbstring, bcmath, intl, pdo, mysql 
          tools: composer:2.x

      - name: Cache Composer Dependencies 
        uses: actions/cache@v3 
        with: 
          path: vendor 
          key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }} 
          restore-keys: ${{ runner.os }}-composer- 

      - name: Deploy to Production
        if: success() 
        uses: appleboy/ssh-action@v1.0.0 
        with: 
          debug: true
          host: ${{ secrets.HOSTINGER_IP }}
          username: ${{ secrets.HOSTINGER_USERNAME }}
          password: ${{ secrets.HOSTINGER_PASSWORD }}
          port: "65002"
          script: | 
            DEPLOY_DIR="domains/carxchangeapp.com/public_html" 
            cd "$DEPLOY_DIR" 

            # Set up SSH key for Git with debug
            mkdir -p ~/.ssh
            echo "Setting up SSH key..."
            echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_ed25519
            chmod 600 ~/.ssh/id_ed25519
            ssh-keyscan github.com >> ~/.ssh/known_hosts
            
            # Test SSH connection
            echo "Testing SSH connection to GitHub..."
            ssh -T git@github.com || true
            
            # Clean and prepare directory
            echo "Preparing directory..."
            rm -rf .git
            
            # Fresh clone with verbose output
            echo "Performing fresh clone..."
            git clone -v --progress git@github.com:Katznicho/carXChange.git temp_dir
            
            # Move contents and cleanup
            echo "Moving repository contents..."
            cp -r temp_dir/. .
            rm -rf temp_dir
            
            echo "Verifying repository contents:"
            ls -la
            git status

            # Add debug statements
            echo "Current directory contents:"
            ls -la
            
            # Ensure Git uses SSH remote 
            if [ -d ".git" ]; then 
              echo "Git directory exists, updating..."
              echo "Setting remote URL to SSH..." 
              git remote set-url origin git@github.com:Katznicho/carXChange.git 
              echo "Current git remote:"
              git remote -v
              echo "Pulling latest changes from main branch..." 
              git fetch origin 
              git reset --hard origin/main 
              echo "Git status after pull:"
              git status
            else 
              echo "No git directory found, cloning fresh..."
              echo "Cloning repository with SSH..." 
              git clone -b main git@github.com:Katznicho/carXChange.git . 
              echo "Git status after clone:"
              git status
            fi 
            
            echo "Final directory contents:"
            ls -la

            # Install Composer 2.x locally if not present 
            if [ ! -f "composer" ]; then 
              php -r "copy('https://getcomposer.org/installer', 'composer-setup.php');" 
              php composer-setup.php 
              php -r "unlink('composer-setup.php');" 
              mv composer.phar composer 
              chmod +x composer 
            fi 

            # Use local Composer 2.x for dependencies 
            if [ ! -d "vendor" ] || [ -n "$(git diff --name-only HEAD^ HEAD | grep 'composer.json\|composer.lock')" ]; then 
              ./composer install --no-dev --optimize-autoloader 
            fi 

            # Dump autoload 
            ./composer dump-autoload --optimize 

            # Clear caches 
            php artisan optimize:clear 
            php artisan config:clear 
            php artisan cache:clear 
            php artisan route:clear 
            php artisan route:cache 

            # Ensure storage symlink 
            if [ ! -L public/storage ]; then 
              ln -s $(pwd)/storage/app/public $(pwd)/public/storage || echo "Symlink creation failed: $?" 
            fi 

            # Always run migrations 
            php artisan migrate --force 

            # Run seeders only on first setup
            if [ ! -f ".seeder_completed" ]; then
              echo "Running seeders for first-time setup..."
              php artisan db:seed --force
              touch .seeder_completed
            fi

            # Ensure proper .htaccess exists in public directory
            cat > public/.htaccess << 'EOL'
            <IfModule mod_rewrite.c>
                <IfModule mod_negotiation.c>
                    Options -MultiViews -Indexes
                </IfModule>

                RewriteEngine On

                # Handle Authorization Header
                RewriteCond %{HTTP:Authorization} .
                RewriteRule .* - [E=HTTP_AUTHORIZATION:%{HTTP:Authorization}]

                # Redirect Trailing Slashes If Not A Folder...
                RewriteCond %{REQUEST_FILENAME} !-d
                RewriteCond %{REQUEST_URI} (.+)/$
                RewriteRule ^ %1 [L,R=301]

                # Send Requests To Front Controller...
                RewriteCond %{REQUEST_FILENAME} !-d
                RewriteCond %{REQUEST_FILENAME} !-f
                RewriteRule ^ index.php [L]
            </IfModule>
            EOL

            # Touch index.php to force reload 
            touch index.php

            echo "Deployment completed!"

            # Create .env file
            echo "Creating .env file..."
            cat > .env << 'EOL'
            APP_NAME=CarXChange
            APP_ENV=production
            APP_DEBUG=false
            APP_URL=https://carxchangeapp.com

            LOG_CHANNEL=stack
            LOG_DEPRECATIONS_CHANNEL=null
            LOG_LEVEL=debug

            DB_CONNECTION=mysql
            DB_HOST=127.0.0.1
            DB_PORT=3306
            DB_DATABASE=u227994091_carxchange
            DB_USERNAME=u227994091_carxchange
            DB_PASSWORD=Log10tan10

            BROADCAST_DRIVER=log
            CACHE_DRIVER=file
            FILESYSTEM_DISK=local
            QUEUE_CONNECTION=sync
            SESSION_DRIVER=file
            SESSION_LIFETIME=120
            EOL

            # Generate application key
            php artisan key:generate --force

            # Set proper permissions
            chmod -R 755 storage bootstrap/cache
            chown -R www-data:www-data storage bootstrap/cache

            # Install Composer dependencies
            ./composer install --no-dev --optimize-autoloader 

            # Clear all caches and optimize
            php artisan config:clear
            php artisan cache:clear
            php artisan route:clear
            php artisan view:clear
            php artisan optimize:clear

            # Run migrations with force and verbose output
            echo "Running database migrations..."
            php artisan migrate --force --verbose

            # Run seeders only on first setup
            if [ ! -f ".seeder_completed" ]; then
              echo "Running seeders for first-time setup..."
              php artisan db:seed --force
              touch .seeder_completed
            fi

            # Create root .htaccess file
            echo "Creating root .htaccess file..."
            cat > .htaccess << 'EOL'
            <IfModule mod_rewrite.c>
                # That was ONLY to protect you from 500 errors
                # if your server did not have mod_rewrite enabled
                RewriteEngine On
                # RewriteBase /
                # NOT needed unless you're using mod_alias to redirect
                RewriteCond %{REQUEST_URI} !/public
                RewriteRule ^(.*)$ public/$1 [L]
                # Direct all requests to /public folder
            </IfModule>
            EOL

            # Verify root .htaccess was created
            echo "Verifying root .htaccess file..."
            if [ -f ".htaccess" ]; then
                echo "Root .htaccess file created successfully"
                ls -la .htaccess
                cat .htaccess
            else
                echo "ERROR: Root .htaccess file creation failed!"
            fi

            # Set proper permissions for root .htaccess
            chmod 644 .htaccess

            # Create and verify public/.htaccess file
            echo "Creating .htaccess file..."
            cat > public/.htaccess << 'EOL'
            <IfModule mod_rewrite.c>
                <IfModule mod_negotiation.c>
                    Options -MultiViews -Indexes
                </IfModule>

                RewriteEngine On

                # Handle Authorization Header
                RewriteCond %{HTTP:Authorization} .
                RewriteRule .* - [E=HTTP_AUTHORIZATION:%{HTTP:Authorization}]

                # Redirect Trailing Slashes If Not A Folder...
                RewriteCond %{REQUEST_FILENAME} !-d
                RewriteCond %{REQUEST_URI} (.+)/$
                RewriteRule ^ %1 [L,R=301]

                # Send Requests To Front Controller...
                RewriteCond %{REQUEST_FILENAME} !-d
                RewriteCond %{REQUEST_FILENAME} !-f
                RewriteRule ^ index.php [L]
            </IfModule>
            EOL

            # Verify .htaccess was created
            echo "Verifying .htaccess file..."
            if [ -f "public/.htaccess" ]; then
                echo ".htaccess file created successfully"
                ls -la public/.htaccess
                cat public/.htaccess
            else
                echo "ERROR: .htaccess file creation failed!"
            fi

            # Set proper permissions for .htaccess
            chmod 644 public/.htaccess

            # Touch index.php to force reload 
            touch index.php

            echo "Deployment completed!"